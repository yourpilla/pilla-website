import { AnalysisResult } from './ai-analyzer';

interface EmailParams {
  managerName: string;
  managerEmail: string;
  analysis: AnalysisResult;
  dateRange: {
    start: string;
    end: string;
  };
  teams: string[];
}

interface LoopsResponse {
  success: boolean;
  id?: string;
  message?: string;
}

class EmailSender {
  private apiKey: string;
  private apiUrl: string = 'https://app.loops.so/api/v1/transactional';

  constructor() {
    this.apiKey = process.env.LOOPS_API_KEY || '';
    
    if (!this.apiKey) {
      console.warn('LOOPS_API_KEY not set - Email sending will fail');
    }
  }

  private formatDateRange(start: string, end: string): string {
    const startDate = new Date(start);
    const endDate = new Date(end);
    
    const options: Intl.DateTimeFormatOptions = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    };
    
    return `${startDate.toLocaleDateString('en-US', options)} - ${endDate.toLocaleDateString('en-US', options)}`;
  }

  private buildEmailContent(params: EmailParams): { subject: string; htmlBody: string; textBody: string } {
    const dateRange = this.formatDateRange(params.dateRange.start, params.dateRange.end);
    const teamsList = params.teams.join(', ');

    const subject = `Weekly Team Insights - ${dateRange}`;

    // HTML Email Body
    const htmlBody = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: #2563eb; color: white; padding: 20px; text-align: center; border-radius: 8px; }
        .section { margin: 20px 0; padding: 15px; background: #f8fafc; border-radius: 8px; border-left: 4px solid #2563eb; }
        .insights { background: #ecfdf5; border-left-color: #059669; }
        .concerns { background: #fef2f2; border-left-color: #dc2626; }
        .recommendations { background: #fffbeb; border-left-color: #d97706; }
        .summary { background: #f1f5f9; border-left-color: #475569; }
        h2 { margin-top: 0; color: #1e293b; }
        ul { padding-left: 20px; }
        li { margin: 8px 0; }
        .footer { margin-top: 30px; padding: 15px; background: #f1f5f9; text-align: center; font-size: 12px; color: #64748b; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìä Weekly Team Report</h1>
        <p>Hi ${params.managerName}, here are your team insights for ${dateRange}</p>
        <p><strong>Teams:</strong> ${teamsList}</p>
    </div>

    <div class="section summary">
        <h2>üìã Executive Summary</h2>
        <p>${params.analysis.summary}</p>
    </div>

    <div class="section insights">
        <h2>‚ú® Key Insights</h2>
        <ul>
            ${params.analysis.keyInsights.map(insight => `<li>${insight}</li>`).join('')}
        </ul>
    </div>

    <div class="section">
        <h2>üìà Trends</h2>
        <ul>
            ${params.analysis.trends.map(trend => `<li>${trend}</li>`).join('')}
        </ul>
    </div>

    ${params.analysis.concerns.length > 0 ? `
    <div class="section concerns">
        <h2>‚ö†Ô∏è Areas for Attention</h2>
        <ul>
            ${params.analysis.concerns.map(concern => `<li>${concern}</li>`).join('')}
        </ul>
    </div>
    ` : ''}

    <div class="section recommendations">
        <h2>üéØ Recommendations</h2>
        <ul>
            ${params.analysis.recommendations.map(rec => `<li>${rec}</li>`).join('')}
        </ul>
    </div>

    <div class="footer">
        <p>This report was generated by Pilla's AI-powered analytics.</p>
        <p>Questions? Reply to this email or contact support.</p>
    </div>
</body>
</html>`;

    // Text Email Body (fallback)
    const textBody = `
WEEKLY TEAM REPORT - ${dateRange}

Hi ${params.managerName},

Here are your team insights for ${dateRange}
Teams: ${teamsList}

EXECUTIVE SUMMARY:
${params.analysis.summary}

KEY INSIGHTS:
${params.analysis.keyInsights.map(insight => `‚Ä¢ ${insight}`).join('\n')}

TRENDS:
${params.analysis.trends.map(trend => `‚Ä¢ ${trend}`).join('\n')}

${params.analysis.concerns.length > 0 ? `
AREAS FOR ATTENTION:
${params.analysis.concerns.map(concern => `‚Ä¢ ${concern}`).join('\n')}
` : ''}

RECOMMENDATIONS:
${params.analysis.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}

---
This report was generated by Pilla's AI-powered analytics.
Questions? Reply to this email or contact support.
`;

    return { subject, htmlBody, textBody };
  }

  async sendManagerReport(params: EmailParams): Promise<{ success: boolean; emailId?: string; error?: string }> {
    try {
      if (!this.apiKey) {
        throw new Error('LOOPS_API_KEY not configured');
      }

      console.log(`Sending email to ${params.managerEmail} via Loops transactional template`);

      // Format data for Loops template variables
      const keyInsightsText = params.analysis.keyInsights.length > 0 
        ? params.analysis.keyInsights.map(insight => `‚Ä¢ ${insight}`).join('\n')
        : '‚Ä¢ No specific insights identified for this period';

      const trendsText = params.analysis.trends.length > 0
        ? params.analysis.trends.map(trend => `‚Ä¢ ${trend}`).join('\n')
        : '‚Ä¢ No significant trends identified for this period';

      const concernsText = params.analysis.concerns.length > 0
        ? params.analysis.concerns.map(concern => `‚Ä¢ ${concern}`).join('\n')
        : 'No areas requiring immediate attention identified';

      const recommendationsText = params.analysis.recommendations.length > 0
        ? params.analysis.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')
        : '‚Ä¢ Continue current operational practices';

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          transactionalId: 'cmf5n97qo05vezd0itgb42j1z',
          email: params.managerEmail,
          dataVariables: {
            managerName: params.managerName,
            dateRange: this.formatDateRange(params.dateRange.start, params.dateRange.end),
            teams: params.teams.join(', '),
            summary: params.analysis.summary,
            keyInsights: keyInsightsText,
            trends: trendsText,
            concerns: concernsText,
            recommendations: recommendationsText
          }
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Loops API error: ${response.status} - ${errorText}`);
      }

      const result: LoopsResponse = await response.json();
      
      console.log(`Email sent successfully to ${params.managerEmail}`, result);

      return {
        success: true,
        emailId: result.id
      };

    } catch (error) {
      console.error('Error sending email via Loops:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // Alternative method that sends via Loops' simple send API (if you prefer not to use templates)
  async sendSimpleManagerReport(params: EmailParams): Promise<{ success: boolean; emailId?: string; error?: string }> {
    try {
      if (!this.apiKey) {
        throw new Error('LOOPS_API_KEY not configured');
      }

      const { subject, htmlBody } = this.buildEmailContent(params);

      const response = await fetch('https://app.loops.so/api/v1/emails/send', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: params.managerEmail,
          subject: subject,
          html: htmlBody,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Loops simple send error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      
      console.log(`Simple email sent successfully to ${params.managerEmail}`);

      return {
        success: true,
        emailId: result.id
      };

    } catch (error) {
      console.error('Error sending simple email via Loops:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
}

// Export singleton instance
export const emailSender = new EmailSender();
export type { EmailParams };